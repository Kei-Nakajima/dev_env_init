---
- hosts: localhost
  become: yes
  vars:
    - ruby_version: 2.5.1
    - python_version: 3.6.5
  tasks:
    - name: disable iptables
      service: name=iptables state=stopped enabled=no
    - name: install libselinux-python
      yum: name=libselinux-python state=latest
    - name: remove localtime
      file: path=/etc/localtime state=absent
    - name: change timezone
      file: src=/usr/share/zoneinfo/Asia/Tokyo dest=/etc/localtime state=link force=yes mode=0644
    - name: change locale
      lineinfile: >-
        dest=/etc/sysconfig/i18n
        state=present
        regexp=^LANG=
        line='LANG="ja_JP.UTF-8"'
    - name: install remi repository
      command: rpm -Uvh --force http://rpms.famillecollet.com/enterprise/remi-release-6.rpm
    - name: install man
      yum: name=man state=latest
    - name: install apache
      yum: name=httpd state=latest
    - name: start apache and enabled
      service: name=httpd state=started enabled=yes
    - name: change owner
      file: dest=/var/www/html owner=vagrant recurse=yes
    - name: copy httpd.conf
      copy: src=httpd.conf.custom dest=/etc/httpd/conf/httpd.conf backup=yes
      notify:
        - restart apache
    - name: install gd-last
      yum: name=gd-last enablerepo=remi state=latest
    - name: install php
      yum: name={{item}} enablerepo=remi-php56 state=present
      with_items:
        - php
        - php-common
        - php-pdo
        - php-cli
        - php-devel
        - php-mysqlnd
        - php-mbstring
        - php-gd
        - php-intl
        - php-xml
      notify:
        - restart apache
    - name: copy php.ini.custom
      copy: src=php.ini.custom dest=/etc/php.ini backup=yes
      notify:
        - restart apache

    - name: install mysql repository
      command: rpm -Uvh --force http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm
    - name: install mysql
      yum: name={{item}} state=present
      with_items:
        - mysql
        - mysql-devel
        - mysql-server
        - mysql-utilities
    - name: copy my.cnf.custom
      copy: src=my.cnf.custom dest=/etc/my.cnf backup=yes
    - name: start mysql and enabled
      service: name=mysqld state=started enabled=yes
    - name: install ruby dependencies
      yum: name={{item}} enablerepo=remi,epel state=present
      with_items:
        - gcc
        - openssl
        - openssl-devel
        - rpm-build
        - gcc-c++
        - bzip2
        - bzip2-devel
        - libtool
        - zlib
        - zlib-devel
        - httpd-devel
        - openssl-devel
        - curl-devel
        - ncurses-devel
        - gdbm-devel
        - readline
        - readline-devel
        - sqlite
        - sqlite-devel
        - libyaml-devel
        - libffi-devel
        - bison
        - rubygems

    - name: check rbenv installed
      command: test -x /home/vagrant/.rbenv
      register: rbenv_present
      become: no
      failed_when: rbenv_present.rc not in [0, 1]
    - name: git clone rbenv
      git: repo=https://github.com/sstephenson/rbenv.git dest=/home/vagrant/.rbenv
      when: rbenv_present.rc == 1
      become: no
    - name: update bash_profile
      copy: src=bash_profile.custom dest=/home/vagrant/.bash_profile backup=yes
      become: yes
    - name: activate bash_profile
      shell: /bin/bash -lc "source ~/.bash_profile"
      become: yes
    - name: add vimrc
      copy: src=vimrc.custom dest=/home/vagrant/.vimrc
      become: yes

    - name: check ruby-build installed
      command: test -x /home/vagrant/.rbenv/plugins/ruby-build
      register: rbuild_present
      become: no
      failed_when: rbuild_present.rc not in [0, 1]
    - name: git clone ruby-build
      git: repo=https://github.com/sstephenson/ruby-build.git dest=/home/vagrant/.rbenv/plugins/ruby-build
      when: rbuild_present.rc == 1
      become: no

    - name: update rbenv
      command: git pull --rebase chdir=/home/vagrant/.rbenv
      become: no
    - name: update ruby-build
      command: git pull --rebase chdir=/home/vagrant/.rbenv/plugins/ruby-build
      become: no

    - name: check ruby installed
      shell: /bin/bash -lc "rbenv versions | grep {{ruby_version}}"
      register: ruby_installed
      become: no
      failed_when: ruby_installed.rc not in [0, 1]
    - name: install ruby
      shell: /bin/bash -lc "rbenv install {{ruby_version}} && rbenv rehash && rbenv global {{ruby_version}}"
      when: ruby_installed.rc == 1
      become: no

    - name: check rails installed
      shell: /bin/bash -lc "rails -v"
      register: rails_installed
      ignore_errors: yes
      become: no
    - name: install rails
      shell: /bin/bash -lc "gem update --system && gem install --no-ri --no-rdoc rails && gem install bundler && rbenv rehash"
      when: rails_installed.rc != 0
      become: yes

    - name: check heroku installed
      shell: /bin/bash -lc "heroku --version"
      register: heroku_installed
      ignore_errors: yes
      become: no
    - name: download heroku
      shell: /bin/bash -lc "wget https://cli-assets.heroku.com/heroku-cli/channels/stable/heroku-cli-linux-x64.tar.gz -O heroku.tar.gz"
      when: heroku_installed.rc != 0
      become: yes
    - name: install heroku
      shell: /bin/bash -lc "mkdir heroku"
      become: yes
    - name: install heroku2
      shell: /bin/bash -lc "tar -xvzf heroku.tar.gz -C heroku --strip-components 1"
      become: yes
    - name: install heroku3
      shell: /bin/bash -lc "mkdir -p /usr/local/lib /usr/local/bin"
      become: yes
    - name: install heroku4
      shell: /bin/bash -lc "mv heroku /usr/local/lib/heroku"
      become: yes
    - name: install heroku5
      shell: /bin/bash -lc "ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku"
      become: yes
    - name: install heroku6
      shell: /bin/bash -lc "rm -rf heroku.tar.gz"
      become: yes

    - name: check pyenv installed
      command: test -x /home/vagrant/.pyenv
      register: pyenv_present
      ignore_errors: yes
      become: no
    - name: git clone pyenv
      git: repo=https://github.com/yyuu/pyenv.git dest=/home/vagrant/.pyenv
      when: pyenv_present.rc != 0
      become: no

    - name: check pyvirtual installed
      command: test -x /home/vagrant/.pyenv/plugins/pyenv-virtualenv
      register: pyvirtual_present
      ignore_errors: yes
      become: no
    - name: git clone pyenv-virtual
      git: repo=https://github.com/yyuu/pyenv-virtualenv.git dest=/home/vagrant/.pyenv/plugins/pyenv-virtualenv
      when: pyvirtual_present != 0
      become: no

    - name: update pyenv
      command: git pull --rebase chdir=/home/vagrant/.pyenv
      become: no
    - name: update pyenv-virtualenv
      command: git pull --rebase chdir=/home/vagrant/.pyenv/plugins/pyenv-virtualenv
      become: no

    - name: check python installed
      shell: /bin/bash -lc "pyenv versions | grep {{python_version}}"
      register: python_installed
      ignore_errors: yes
      become: no
    - name: install python
      shell: /bin/bash -lc "pyenv install {{python_version}} && pyenv rehash && pyenv global {{python_version}}"
      when: python_installed.rc != 0
      become: no

    - name: check node js installed
      shell: /bin/bash -lc "node -v"
      register: node_installed
      ignore_errors: yes
      become: no
    - name: install node script
      shell: /bin/bash -lc "curl -sL https://rpm.nodesource.com/setup | bash -"
      when: node_installed.rc != 0
    - name: install nodejs
      yum: name=nodejs state=latest
      when: node_installed.rc != 0
    - name: install npm
      yum: name=npm state=latest
      when: node_installed.rc != 0

    - name: ready install neovim
      yum: name={{item}} state=latest
      with_items:
        - libtool
        - autoconf
        - automake
        - cmake
        - gcc
        - gcc-c++
        - make
        - pkgconfig
        - unzip
        - vim
    #   become: yes
    # - name: git neovim
    #   git: repo=https://github.com/neovim/neovim dest=/home/vagrant/neovim
    #   become: no
    # - name: make neovim
    #   shell: /bin/bash -lc "cd /home/vagrant/neovim && make"
    #   become: yes
    # - name: install neovim
    #   shell: /bin/bash -lc "cd /home/vagrant/neovim && make install"
    #   become: yes
    # - name: config neovim
    #   shell: /bin/bash -lc "mkdir -p ~/.config"
    #   become: yes
    # - name: config neovim0.5
    #   shell: /bin/bash -lc "mkdir -p ~/.vim"
    #   become: yes
    # - name: config neovim2
    #   shell: /bin/bash -lc "ln -s ~/.vim ~/.config/nvim"
    #   become: yes
    # - name: config neovim3
    #   shell: /bin/bash -lc "ln -s ~/.vimrc ~/.config/nvim/init.vim"
    #   become: yes
    # - name: mkdir
    #   shell: /bin/bash -lc "mkdir -p /home/vagrant/.vim/repos/github.com"
    # - name: copy neovim settings
    #   copy: src=lazy.toml dest=/home/vagrant/.vim/repos/github.com/Shougo backup=yes
    #   become: yes
    # - name: copy neovim settings
    #   copy: src=plugins.toml dest=/home/vagrant/.vim/repos/github.com/Shougo backup=yes
    #   become: yes
    # - name: activate neovim
    #   shell: /bin/bash -lc "source ~/.bash_profile"
    #   become: yes
  
  handlers:
    - name: restart apache
      service: name=httpd state=restarted




